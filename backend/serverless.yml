service:
  name: serverless-expense-tracker-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function

# Uncomment to enable individual packaging
package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    #apiGateway: true

  environment:
    TRANSACTIONS_TABLE: Transactions-${self:provider.stage}
    USERID_INDEX: UserIdIndex
    IMAGES_S3_BUCKET: serverless-expense-tracker-images-pvsm-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    #ES_ENDPOINT: !GetAtt ImagesSearch.DomainEndpoint 

  logs:
    restApi: true

functions:


custom:
  documentation:
    # api:
    #   info:
    #     version: v1.0.0
    #     title: Todo API
    #     description: Serverless application for expenses tracking

resources:
  Resources:
    TodosDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: transactionId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: transactionId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.TRANSACTIONS_TABLE}
        LocalSecondaryIndexes:
            - IndexName: ${self:provider.environment.USERID_INDEX}
              KeySchema:
                - AttributeName: userId
                  KeyType: HASH
                - AttributeName: createdAt
                  KeyType: RANGE
              Projection:
                ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket